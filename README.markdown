# Обзор проекта: Маркетплейс автозапчастей

## Введение

Маркетплейс автозапчастей — это веб-приложение для покупки и продажи автомобильных запчастей на российском рынке. Проект ориентирован на упрощение поиска запчастей с использованием VIN-кода, предоставление удобного интерфейса для покупателей и продавцов, а также базовые функции администрирования. Приложение разработано с использованием HTML, CSS и JavaScript для фронтенда, с локальным хранением данных через `localStorage` и JSON-файлы.

## Цели проекта

- Обеспечить удобный поиск автозапчастей по VIN-коду и фильтрам.
- Предоставить функционал для покупателей: просмотр каталога, добавление товаров в корзину, оформление заказа.
- Обеспечить продавцов инструментами для управления товарами и заказами.
- Реализовать безопасную и интуитивно понятную систему аутентификации для всех ролей (покупатель, продавец, администратор).
- Поддерживать расчёт доставки на основе веса и расстояния.

## Структура проекта

```
marketplace-autoparts/
├── auth/
│   ├── data/
│   │   └── users.json      # Данные пользователей
│   ├── index.html          # Страница аутентификации
│   ├── style.css           # Стили для страницы аутентификации
│   └── script.js           # Логика аутентификации
├── dashboard/
│   ├── buyer/
│   │   ├── data/
│   │   │   ├── orders.json   # Данные заказов
│   │   │   └── products.json # Данные товаров
│   │   ├── checkout/
│   │   │   ├── index.html    # Страница оформления заказа
│   │   │   ├── style.css     # Стили для оформления
│   │   │   └── script.js     # Логика оформления заказа
│   │   ├── order/
│   │   │   ├── order-history.html # Страница истории заказов
│   │   │   ├── style.css         # Стили для истории заказов
│   │   │   └── script.js         # Логика истории заказов
│   │   ├── cart/
│   │   │   ├── index.html    # Страница корзины
│   │   │   ├── style.css     # Стили для корзины
│   │   │   └── script.js     # Логика корзины
│   │   ├── index.html        # Главная страница покупателя
│   │   ├── style.css         # Стили для покупателя
│   │   └── script.js         # Логика для покупателя
│   ├── seller/
│   │   ├── order/
│   │   │   ├── index.html    # Страница заказов продавца
│   │   │   ├── style.css     # Стили для заказов
│   │   │   └── script.js     # Логика заказов продавца
│   │   ├── index.html        # Главная страница продавца
│   │   ├── style.css         # Стили для продавца
│   │   └── script.js         # Логика для продавца
│   └── admin/
│       ├── index.html        # Страница администратора (не реализована)
│       ├── style.css         # Стили для администратора
│       └── script.js         # Логика администратора
├── Images/
│   └── placeholder.jpg       # Заглушка для изображений товаров
└── PROJECT_PLAN.md           # План разработки
```

## Основные роли

1. **Покупатель**:
   - Поиск товаров по VIN или фильтрам (марка, модель, год, категория и т.д.).
   - Управление корзиной и оформление заказов.
   - Просмотр истории заказов с возможностью отмены или удаления.
2. **Продавец**:
   - Добавление, редактирование и удаление товаров.
   - Просмотр и управление заказами.
   - Генерация отчётов о продажах в формате Excel (в стадии реализации).
3. **Администратор**:
   - Модерация товаров и управление пользователями (функционал не реализован).

## Технологии

- **Frontend**: HTML5, CSS3, JavaScript (ES6+).
- **Хранилище данных**: `localStorage`, JSON-файлы (`users.json`, `products.json`, `orders.json`).
- **Библиотеки**:
  - Font Awesome 6.0.0 для иконок.
- **Сторонние сервисы**:
  - QR-код генератор (https://api.qrserver.com) для наложенного платежа.

## Установка и запуск

### Требования

- Веб-браузер (Chrome, Firefox, Edge).
- Локальный веб-сервер (например, `http-server` или Live Server в VS Code).

### Инструкции

1. Склонируйте репозиторий:

   ```bash
   git clone <repository-url>
   ```
2. Перейдите в директорию проекта:

   ```bash
   cd marketplace-autoparts
   ```
3. Запустите локальный сервер:

   ```bash
   npx http-server
   ```
4. Откройте в браузере: `http://localhost:8080/auth/index.html`.

## Тестирование

- **Ручное тестирование**:
  - Проверка аутентификации (регистрация, вход, переключение ролей).
  - Тестирование поиска и фильтрации товаров.
  - Проверка процесса оформления заказа и расчёта доставки.
- **Автоматизированное тестирование**:
  - В стадии планирования (будет реализовано с использованием Jest или Cypress).

## Ограничения и известные проблемы

- Отсутствие серверной части (данные хранятся локально).
- VIN-поиск использует упрощённый алгоритм без реального декодирования.
- Функционал администратора не реализован.
- Ограниченная валидация данных на стороне клиента.

## Будущие улучшения

- Интеграция с серверной частью (Node.js/PHP, MySQL).
- Полноценный VIN-декодер с использованием внешних API.
- Расширение аналитики для продавцов.
- Реализация панели администратора.